#lang pie

(claim + (→ Nat Nat Nat))
(define +
  (λ (x y)
    (iter-Nat x
      y
      (λ (acc) (add1 acc)))))

(claim =consequence
  (→ Nat Nat
    U))
(define =consequence
  (λ (m n)
    (which-Nat m
      (which-Nat n
        Trivial
        (λ (n-1) Absurd))
      (λ (m-1)
        (which-Nat n
          Absurd
          (λ (n-1) (= Nat m-1 n-1)))))))

(claim =consequence-same
  (∏ ((n Nat))
    (=consequence n n)))
(define =consequence-same
  (λ (n)
    (ind-Nat n
      (λ (k) (=consequence k k))
      sole
      (λ (n-1 prf) (same n-1)))))

(claim use-Nat=
  (∏ ((m Nat) (n Nat))
    (→ (= Nat m n)
      (=consequence m n))))
(define use-Nat=
  (λ (m n prf)
    (replace prf
      (λ (k) (=consequence m k))
      (=consequence-same m))))

(claim zero-not-add1
  (∏ ((n Nat))
    (→ (= Nat zero (add1 n))
      Absurd)))
(define zero-not-add1
  (λ (n prf)
    (use-Nat= zero (add1 n) prf)))

(claim sub1=
  (∏ ((m Nat) (n Nat))
    (→ (= Nat (add1 m) (add1 n))
      (= Nat m n))))
(define sub1=
  (λ (m n)
    (use-Nat= (add1 m) (add1 n))))

; new stuff starts here

(claim Dec (→ U U))
(define Dec
  (λ (X)
    (Either X (→ X Absurd))))

(claim zero?
  (∏ ((n Nat)) (Dec (= Nat zero n))))
(define zero?
  (λ (n)
    (ind-Nat n
      (λ (k) (Dec (= Nat zero k)))
      (left (same zero))
      (λ (n-1 prf-or-contra)
        (right (zero-not-add1 n-1))))))

        ; my alternate body for (λ (n-1 prf-or-contra))
        ; (ind-Either prf-or-contra
        ;   (λ (e) (Dec (= Nat zero (add1 n-1))))
        ;   (λ (l) (right (λ (contra) (zero-not-add1 n-1 contra))))
        ;   (λ (r) (right (λ (contra) (zero-not-add1 n-1 contra)))))))))

(claim motive-add1-not= (→ Nat U))
(define motive-add1-not=
  (λ (n)
    (→ (= Nat (add1 n) n)
      Absurd)))

(claim step-add1-not=
  (∏ ((n-1 Nat))
    (→ (→ (= Nat (add1 n-1) n-1)
         Absurd)
      (→ (= Nat (add1 (add1 n-1)) (add1 n-1))
        Absurd))))
(define step-add1-not=
  (λ (n-1 contra prf)
    (contra (sub1= (add1 n-1) n-1 prf))))

(claim add1-not=
  (∏ ((n Nat))
    (→ (= Nat (add1 n) n)
      Absurd)))
(define add1-not=
  (λ (n)
    (ind-Nat n
      motive-add1-not=
      (λ (contra) (zero-not-add1 0 (symm contra)))
      step-add1-not=)))

(claim dec-add1=
  (∏ ((n-1 Nat) (j-1 Nat))
    (→ (Dec (= Nat n-1 j-1))
      (Dec (= Nat (add1 n-1) (add1 j-1))))))
(define dec-add1=
  (λ (n-1 j-1 dec-1)
    (ind-Either dec-1
      (λ (e) (Dec (= Nat (add1 n-1) (add1 j-1))))
      (λ (l) (left (cong l (+ 1))))
      (λ (r) (right (λ (prf) (r (sub1= n-1 j-1 prf))))))))

(claim mot-nat=? (→ Nat U))
(define mot-nat=?
  (λ (k)
    (∏ ((j Nat))
      (Dec (= Nat k j)))))

(claim base-nat=?
  (∏ ((j Nat))
    (Dec (= Nat 0 j))))
(define base-nat=? zero?)

(claim step-nat=?
  (∏ ((n-1 Nat))
    (→ (∏ ((j Nat)) (Dec (= Nat n-1 j)))
      (∏ ((j Nat)) (Dec (= Nat (add1 n-1) j))))))

; my first attempt, which proved unworkable on the right branch
; (define step-nat=?
;   (λ (n-1 dec-1 j)
;     (ind-Either (dec-1 j)
;       (λ (e) (Dec (= Nat (add1 n-1) j)))
;       (λ (l)
;         (right (λ (prf)
;                  (add1-not= j
;                    (replace l
;                      (λ (k) (= Nat (add1 k) j))
;                      prf)))))
;       (λ (r)
;         TODO))))

(define step-nat=?
  (λ (n-1 dec-n-1 j)
    (ind-Nat j
      (λ (k) (Dec (= Nat (add1 n-1) k)))
      (right (λ (contra) (zero-not-add1 n-1 (symm contra))))
      (λ (j-1 dec-j-1)
        (dec-add1= n-1 j-1 (dec-n-1 j-1))))))

(claim nat=?
  (∏ ((m Nat) (n Nat))
    (Dec (= Nat m n))))
(define nat=?
  (λ (m n)
    ((ind-Nat m
      mot-nat=?
      base-nat=?
      step-nat=?)
     n)))
