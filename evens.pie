#lang pie

(claim + (→ Nat Nat Nat))
(define +
  (λ (x y)
    (iter-Nat x
      y
      (λ (acc) (add1 acc)))))

(claim double (→ Nat Nat))
(define double
  (λ (n)
    (iter-Nat
      n
      0
      (+ 2))))

(claim Even
  (→ Nat U))
(define Even
  (λ (n)
    (Σ ((half Nat)) (= Nat n (double half)))))

(claim +two-even
  (∏ ((n Nat))
    (→ (Even n)
      (Even (+ 2 n)))))
(define +two-even
  (λ (n prf)
    (cons
      (add1 (car prf))
      (cong (cdr prf) (+ 2)))))

(claim Odd
  (→ Nat U))
(define Odd
  (λ (n)
    (Σ ((haf Nat)) (= Nat n (add1 (double haf))))))

(claim +two-odd
  (∏ ((n Nat))
    (→ (Odd n)
      (Odd (+ 2 n)))))
(define +two-odd
  (λ (n prf)
    (cons
      (add1 (car prf))
      (cong (cdr prf) (+ 2)))))

(claim +one-even-odd
  (∏ ((n Nat))
    (→ (Even n)
      (Odd (add1 n)))))
(define +one-even-odd
  (λ (n prf)
    (cons
      (car prf)
      (cong (cdr prf) (+ 1)))))

(claim +one-odd-even
  (∏ ((n Nat))
    (→ (Odd n)
      (Even (add1 n)))))
(define +one-odd-even
  (λ (n prf)
    (cons
      (add1 (car prf))
      (cong (cdr prf) (+ 1)))))

(claim step-even-or-odd
  (∏ ((n Nat))
    (→ (Either (Even n) (Odd n))
      (Either (Even (add1 n)) (Odd (add1 n))))))
(define step-even-or-odd
  (λ (n prf)
    (ind-Either
      prf
      (λ (prf) (Either (Even (add1 n)) (Odd (add1 n))))
      (λ (prf-even) (right (+one-even-odd n prf-even)))
      (λ (prf-odd) (left (+one-odd-even n prf-odd))))))

(claim even-or-odd
  (Π ((n Nat))
    (Either (Even n) (Odd n))))
(define even-or-odd
  (λ (n)
    (ind-Nat
      n
      (λ (k) (Either (Even k) (Odd k)))
      (left (cons 0 (same 0)))
      step-even-or-odd)))
